#!markdown

# Cryptographer

## Use certificate to code a message

#!fsharp

let __certificate =
    {| dir = "certificates"
    ;  file = "domins.pfx"
    ;  secret = "minik"
    |}

#!markdown

### Generate Keys Pair and Certificate

Generate cert (pair of Keys):
* `openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:4096 -keyout certificates/domins.private.key -out certificates/domins.crt`

Verify created certificate:
* `openssl x509 -in certificates/domins.crt -text -noout`

Convert to Windows X509 format:
* `openssl pkcs12 -export -in certificates/domins.crt -inkey certificates/domins.private.key -out certificates/domins.pfx`

#!fsharp

/// certificate - instace details
module Certificate =
    open System.IO
    open System.Security
    open System.Security.Cryptography.X509Certificates


    let private certificateSecret =
        __certificate.secret

    let private certificateFilePath =
        [| __SOURCE_DIRECTORY__
        ;  __certificate.dir
        ;  __certificate.file
        |] |>  Path.Combine

    let private keyStorageFlags =
        X509KeyStorageFlags.DefaultKeySet


    let load () =
        if not (File.Exists(certificateFilePath)) then
            "Certificate file not found at:"
            + $"\n%s{certificateFilePath}"
            |> failwith

        new X509Certificate2
            ( certificateFilePath
            , certificateSecret
            , keyStorageFlags
            )


let certificate = Certificate.load ()
{| subject = certificate.Subject
;  thumbprint = certificate.Thumbprint
|}

#!markdown

### Cryptographer configuration

#!fsharp

/// pipeline's base hunk of data
type Bytes = byte array

type PipePiece =
    Bytes -> Bytes

type DuplexPipe =
    { encoding: PipePiece
    ; decoding: PipePiece
    }

type Direction =
    | Encoding
    | Decoding

type Pipeline =
    DuplexPipe list

#!fsharp

/// pipeline factories
module Pipeline =

    let passThrough =
        { encoding = id
        ; decoding = id
        }

    let makeFor direction (piece: PipePiece) (pipe: DuplexPipe) =
        match direction with
        | Encoding -> { pipe with encoding = piece }
        | Decoding -> { pipe with decoding = piece }

    let makeEncodingDecoding (encoding, decoding) =
        passThrough
        |> makeFor Encoding encoding
        |> makeFor Decoding decoding

#!fsharp

module Cryptographer =
    open System.IO.Compression
    open System.Security.Cryptography
    open System.Security.Cryptography.X509Certificates
    open Pipeline


    let usingDeflate (): DuplexPipe =
        let withStreams streamsAction (data: Bytes) =
            use dataStream = new MemoryStream(data, false)
            use resultStream = new MemoryStream()
            (dataStream, resultStream)
            |> streamsAction

            resultStream.ToArray()

        let asCompression =
            withStreams <| fun (data, result) ->
                let mode = CompressionMode.Compress
                use deflate = new DeflateStream(result, mode)
                data.CopyTo(deflate)

        let asDecompression =
            withStreams <| fun (data, result) ->
                let mode = CompressionMode.Decompress
                use deflate = new DeflateStream(data, mode)
                deflate.CopyTo(result)

        makeEncodingDecoding
            ( asCompression
            , asDecompression
            )


    let usingRSA (): DuplexPipe =
        let padding = RSAEncryptionPadding.Pkcs1

        let encoding data =
            use rsa = certificate.GetRSAPublicKey()
            rsa.Encrypt(data, padding)

        let decoding data =
            use rsa = certificate.GetRSAPrivateKey()
            rsa.Decrypt(data, padding)

        makeEncodingDecoding
            ( encoding
            , decoding
            )

#!fsharp

/// pipeline configuration
let cryptoPipeline: Pipeline =
    [ Pipeline.passThrough
    ; Cryptographer.usingDeflate ()
    ; Cryptographer.usingRSA ()
    ]

#!fsharp

// rendered encoder & decoder

let renderAs direction pipeline =
    if pipeline |> List.isEmpty then
        $"Cannot render an empty {nameof pipeline}"
        |> failwith

    let ordered =
        match direction with
        | Decoding -> List.rev
        | Encoding -> id

    let through (pipe: DuplexPipe) =
        match direction with
        | Decoding -> pipe.decoding
        | Encoding -> pipe.encoding

    let folder bytes (pipe: DuplexPipe) =
        bytes |> (through pipe)

    fun content ->
        (ordered pipeline)
        |> List.fold folder content

let encoder =
    cryptoPipeline
    |> renderAs
        Encoding

let decoder =
    cryptoPipeline
    |> renderAs
        Decoding

#!fsharp

/// client interface
module Client =

    let bytesFromBase64 (content: string) =
        Convert.FromBase64String(content)

    let bytesFromHex (content: string) =
        Convert.FromHexString(content)

    let bytesFromText (text: string) =
        Encoding.UTF8.GetBytes(text)

    let toBase64 (bytes: byte array) =
        Convert.ToBase64String(bytes)

    let toHex (bytes: byte array) =
        Convert.ToHexString(bytes)

    let toText (bytes: byte array) =
        Encoding.UTF8.GetString(bytes)


    let private line = "-" |> String.replicate 6
    let private lineHead = line + line
    let private printLine (parts: string list) =
        String.concat " " parts
        |> printfn "%s"

    let printHeader message =
        [ lineHead; message; line ]
        |> printLine

    let printDetail message =
        [ line; message ]
        |> printLine


    let private lineOf (text: string) n =
        let limit = 64
        let idx = n * limit

        match idx < text.Length with
        | false -> None
        | _ ->
            match idx + limit < text.Length with
            | false -> text.Substring(idx)
            | _ -> text.Substring(idx, limit)
            |> Some

    let private printBytesAs stringify data =
        let content = data |> stringify
        let lines =
            Seq.initInfinite (lineOf content)
            |> Seq.takeWhile Option.isSome
            |> Seq.map Option.get
            |> Seq.toList

        let toRowNumber n =
            Math.Log10(lines.Length)
            |> (int >> ((+) 1))
            |> sprintf "{0,%d}"
            |> fun f ->
                String.Format(f, n + 1)

        lines |> List.iteri (fun n line ->
            printfn $" {toRowNumber n} | {line}"
        )

    let printBytesAsHex =
        printBytesAs toHex

    let printBytesAsBase64 =
        printBytesAs toBase64


open Client

#!markdown

### Secret Message

#!fsharp

let secret_message_is_already_encoded = false
let secret_message = """hit me with some enters ðŸ˜…"""

#!fsharp

// show secret_message

let raw =
    let toRawBytes =
        if secret_message_is_already_encoded
        then bytesFromBase64
        else bytesFromText

    secret_message
    |> toRawBytes


printHeader "Given Secret Message"
match secret_message_is_already_encoded with
| true -> raw |> toText
| _ -> secret_message
|> printf "%s"

#!fsharp

// raw bytes

printHeader "Message Bytes"
printBytesAsHex raw


let whenNotAlreadyEncodedAs what doAction =
    match secret_message_is_already_encoded with
    | false -> doAction ()
    | _ ->
        $"Same as %s{what}"
        |> printDetail

#!fsharp

// encoded cipher

let cipher =
    let toCipherBytes =
        if secret_message_is_already_encoded
        then fun bytes -> bytes
        else encoder

    raw
    |> toCipherBytes


printHeader "Message Cipher"
whenNotAlreadyEncodedAs "Message Bytes"
    (fun () -> printBytesAsHex cipher)

#!fsharp

// cipher as base64

printHeader "Cipher (Base64)"
whenNotAlreadyEncodedAs "Secret Message"
    (fun () -> printBytesAsBase64 cipher)

#!markdown

### Solved Message

#!fsharp

// decoded cipher

let solved =
    cipher |> decoder

printHeader "Solved Bytes"
printBytesAsHex solved

#!fsharp

// solved as base64

printHeader "Solved (Base64)"
printBytesAsBase64 solved

#!fsharp

// show message

printHeader "Found Secret Message"

let isMatched =
    raw.Length = solved.Length
    && Seq.zip raw solved
    |> Seq.forall
        (fun (a, b) -> a = b)

printDetail $"Is matched to original: %A{isMatched}"
printf $"%s{solved |> toText}"
