#!markdown

# Domin's Cookie Extractor

Use with `input.http` file as Cookies' source ([HTTP Request](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#http_requests)),
<br/> or provide it within `__RAW_INPUT__` text string just below:

#!fsharp

let __INPUT_FILE__ = "input.http"
let __INPUT_FILE__FORCE__ = false

let __RAW_INPUT__ = """
# or provide It here
"""

#!fsharp

module InputFile =
    open System.IO

    let private whenPlausibleAsPath (path: string) =
        let invalidChars = Path.GetInvalidPathChars()
        let isInvalidChar ch =
            invalidChars |> Array.contains ch

        path.ToCharArray()
        |> Seq.where isInvalidChar
        |> Seq.isEmpty
        |> function
            | true -> Some path
            | _ -> None

    let private whenExistingFile (path: string) =
        let fullPath =
            if not <| Path.IsPathFullyQualified(path)
            then Path.GetFullPath(path)
            else path

        if File.Exists(fullPath)
        then Some fullPath
        else None


    let openTextFile path =
        match String.IsNullOrWhiteSpace(path) with
        | false -> path.Trim() |> Some
        | _ -> None
        |> Option.bind whenPlausibleAsPath
        |> Option.bind whenExistingFile
        |> Option.map File.OpenText

#!fsharp

module InputSource =
    open System.Text.RegularExpressions

    let private commentLinePattern =
        Regex @"^\s*#"

    let private readAllLines (source: TextReader) =
        let nextLine () = source.ReadLine()
        let isNotNull (x: string) =
            x |> (not << isNull)

        let mutable line = nextLine ()
        [ while line |> isNotNull do
            yield line
            line <- nextLine ()
        ]

    let private readFileLines path =
        let fromStream source =
            use stream = source
            stream |> readAllLines

        InputFile.openTextFile path
        |> Option.map fromStream

    let private splitToLines text =
        use stream = new StringReader(text)
        stream |> readAllLines

    let private withoutEmpty content =
        let notEmpty line =
            match line |> String.IsNullOrWhiteSpace with
            | false -> line.TrimEnd() |> Some
            | _ -> None

        let notComment line =
            commentLinePattern
                .IsMatch(line)
            |> not

        let lines =
            content
            |> Seq.choose notEmpty
            |> Seq.where notComment
            |> Seq.toList

        if not lines.IsEmpty
        then lines |> Some
        else None

    let getInputLines () =
        let readInputFileLines () =
            readFileLines __INPUT_FILE__
            |> Option.bind withoutEmpty

        let fromRawInputLines () =
            __RAW_INPUT__
            |> splitToLines
            |> withoutEmpty

        match __INPUT_FILE__FORCE__ with
        | true -> readInputFileLines ()
        | _ ->
            fromRawInputLines ()
            |> Option.orElseWith
                readInputFileLines

#!fsharp

module HttpMessage =
    open System.Text.RegularExpressions

    let private whenLineMatch (pattern: Regex) line =
        let result = pattern.Match(line)
        match result.Success with
        | true -> result |> Some
        | _ -> None


    type Header =
        { name: string
        ; value: string
        }

    module Header =
        let private pattern =
            Regex @"^(?<Name>\w+): (?<Value>.*)$"

        let private toHeader (matched: Match) =
            let get (what: string) =
                matched.Groups[what].Value

            { name = get "Name"
            ; value = get "Value"
            }

        let parse line : Header option =
            line
            |> whenLineMatch pattern
            |> Option.map toHeader

        let matches name (header: Header) =
            StringComparer.OrdinalIgnoreCase
                .Equals(name, header.name)
            |> function
                | true -> header |> Some
                | _ -> None


    type Request =
        { lines: string list
        ; headers: Header list
        }

    module Request =
        let hasHeader name (request: Request) =
            request.headers
            |> Seq.choose
                (Header.matches name)
            |> Seq.tryHead


module HttpMessages =
    open HttpMessage

    let parseRequest startLine request =
        let getHeaders =
            Seq.choose Header.parse
            >> Seq.toList

        { lines = startLine :: request
        ; headers = request |> getHeaders
        } |> Some

#!fsharp

module Continuum_Common =

    type Singleton<'a> =
        | NotSingleOne of ('a list) option
        | SingleOne of 'a

    module Singleton =
        let defaultWith source = function
            | NotSingleOne _ -> source ()
            | SingleOne one -> one

        let form = function
            | [] -> NotSingleOne None
            | [ item ] -> item |> SingleOne
            | items ->
                (items |> Some)
                |> NotSingleOne

        let toList = function
            | NotSingleOne None -> []
            | NotSingleOne (Some list) -> list
            | SingleOne singleton -> [ singleton ]


    let printWithHeader header text =
        [ String.replicate 69 "-"
        ; ("---------  " + header)
        ; text
        ; ""
        ] |> List.iter (printfn "%s")

    let toTextList mapper =
        List.map mapper
        >> List.mapi (sprintf "%d. %s")
        >> String.concat "\n"

#!fsharp

type Cookie =
    { key: string
    ; value: string
    }

module Cookie =
    let toString (cookie: Cookie) =
        let trimmed =
            let limit = 42
            let ending = "..."
            let cv = cookie.value

            match cv.Length <= limit with
            | true -> cv
            | _ ->
                let stop = limit - ending.Length
                cv.Substring(0, stop) + ending

        $"%s{cookie.key} -> %s{trimmed}"

#!fsharp

module CookieSource =
    open System.Text.RegularExpressions
    open Continuum_Common
    open HttpMessage

    let private header = "Cookie"

    let private asCookieHeader = function
        | [ line ] ->
            Header.parse line
            |> Option.bind
                (Header.matches header)

        | _ -> None

    let private asHttpRequest = function
        | startLine :: requestRest ->
            (startLine, requestRest)
            ||> HttpMessages.parseRequest
            |> Option.bind
                (Request.hasHeader header)

        | [] -> None

    module private Cookie =
        let private delimeter = "; "
        let private pattern =
            Regex @"(?<Key>.+?)=(?<Value>.+)"

        let fromHeader (header: Header) =
            let toCookie value =
                let matched = pattern.Match(value)
                match matched.Success with
                | false ->
                    $"Cannot parse %A{value} as Cookie entry"
                    |> failwith

                | true ->
                    let get (what: string) =
                        matched.Groups[what].Value

                    { key = get "Key"
                    ; value = get "Value"
                    }

            header.value.Split(delimeter)
            |> Seq.map toCookie
            |> Seq.toList

    let private findCookies inputLines =
        [ asHttpRequest
        ; asCookieHeader
        ]
        |> Seq.choose ((|>) inputLines)
        |> Seq.tryHead
        |> Option.map
            (Cookie.fromHeader)

    let private anything x = true

    let private byName name (c: Cookie) =
        StringComparer.OrdinalIgnoreCase
            .Equals(name, c.key)

    let matched filter =
        List.choose <| fun (c: Cookie) ->
            let score = filter c
            match score with
            | false -> None
            | _ ->
                (score, c)
                |> Some

    let find filter =
        InputSource.getInputLines ()
        |> Option.bind findCookies
        |> Option.map (matched filter)

    let all () =
        find anything
        |> Option.map
            (List.map snd)

    let get name =
        let gotOne =
            (List.map snd)
            >> Singleton.form
            >> Some

        find (byName name)
        |> Option.bind gotOne

    let combined prefix =
        let prefixPattern =
            let toRegex pattern =
                let options = RegexOptions.IgnoreCase
                Regex(pattern, options)

            Regex.Escape(prefix)
            |> sprintf "^%s(?<suffix>.*)"
            |> toRegex

        let isPrefixMatch (c: Cookie) =
            prefixPattern.IsMatch(c.key)

        let numSuffix (c: Cookie) =
            let matched = prefixPattern.Match(c.key)
            match matched.Success with
            | false -> failwith $"how matched: {c.key}"
            | _ ->
                match matched.Groups["suffix"].Value with
                | "" -> 0
                | suffix ->
                    match Int32.TryParse(suffix) with
                    | (true, parsed) ->
                        parsed
                    | (false, _) ->
                        $"The '{prefix}' suffix is NAN: {c.key}"
                        |> failwith

        let orderCookies =
            let orderedValue (c: Cookie) =
                let order = c |> numSuffix
                (order, c)

            List.map (snd >> orderedValue)
            >> List.sortBy fst

        let combine =
            let extract i (order, c: Cookie) =
                if i <> order then
                    $"Unexpected order as: {order} at: {i}, for: {c.key}"
                    |> failwith

                c.value

            List.mapi extract
            >> String.concat ""

        find isPrefixMatch
        |> Option.map orderCookies
        |> Option.map combine

#!fsharp

open Continuum_Common

let sourceCookie = "backmsg"
let cookieValue =
    CookieSource.combined sourceCookie
    |> Option.defaultWith (fun _ ->
        $"Cannot get combined value of %A{sourceCookie}."
        |> failwith
    )

printWithHeader
    $"Combined '%s{sourceCookie}' Cookie's value:"
    cookieValue


let decodedValue =
    Convert.FromBase64String(cookieValue)
    |> Encoding.UTF8.GetString

printWithHeader
    "Raw value decoded from Base64:"
    decodedValue
